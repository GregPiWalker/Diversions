        #region Prism.Mvvm.BindableBase Re-writes with AffectsPropertyAttribute Support

        /// <summary>
        /// Checks if a property already matches a desired value. Sets the property and
        /// notifies listeners only when necessary.
        /// </summary>
        /// <typeparam name="T">Type of the property.</typeparam>
        /// <param name="storage">Reference to a property with both getter and setter.</param>
        /// <param name="value">Desired value for the property.</param>
        /// <param name="propertyName">Name of the property used to notify listeners. This
        /// value is optional and can be provided automatically when invoked from compilers that
        /// support CallerMemberName.</param>
        /// <returns>True if the value was changed, false if the existing value matched the
        /// desired value.</returns>
        protected virtual bool SetProperty<T>(ref T storage, T value, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(storage, value)) return false;

            storage = value;
            RaisePropertyChanged(propertyName);

            // Now propagate the change to any affected local properties.
            NotifyAffectedProperties(GetType().GetProperty(propertyName));

            return true;
        }

        /// <summary>
        /// Checks if a property already matches a desired value. Sets the property and
        /// notifies listeners only when necessary.
        /// </summary>
        /// <typeparam name="T">Type of the property.</typeparam>
        /// <param name="storage">Reference to a property with both getter and setter.</param>
        /// <param name="value">Desired value for the property.</param>
        /// <param name="propertyName">Name of the property used to notify listeners. This
        /// value is optional and can be provided automatically when invoked from compilers that
        /// support CallerMemberName.</param>
        /// <param name="onChanged">Action that is called after the property value has been changed.</param>
        /// <returns>True if the value was changed, false if the existing value matched the
        /// desired value.</returns>
        protected virtual bool SetProperty<T>(ref T storage, T value, Action onChanged, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(storage, value)) return false;

            storage = value;
            onChanged?.Invoke();
            RaisePropertyChanged(propertyName);

            // Now propagate the change to any affected local properties.
            NotifyAffectedProperties(GetType().GetProperty(propertyName));

            return true;
        }

        /*
        /// <summary>
        /// Raises this object's PropertyChanged event.
        /// Beware that this will also raise notifications for any local properties decorated as 'affected by'.
        /// </summary>
        /// <param name="propertyName">Name of the property used to notify listeners. This
        /// value is optional and can be provided automatically when invoked from compilers
        /// that support <see cref="CallerMemberNameAttribute"/>.</param>
        /// <param name="sender">The original sender of the event.</param>
        private void RaisePropertyChanged(PropertyInfo property, object sender = null)
        {
            OnPropertyChanged(new PropertyChangedEventArgs(property.Name), sender);

            // Now propagate the change to any affected local properties.
            NotifyAffectedProperties(property);
        }
        */

        #endregion Prism.Mvvm.BindableBase Re-writes with AffectsPropertyAttribute Support


        #region Prism.Mvvm.BindableBase Re-writes with DiversionDelegate Support

        private readonly DiversionDelegate<PropertyChangedEventArgs> _propertyChangedDelegate = new DiversionDelegate<PropertyChangedEventArgs>();

        /// <summary>
        /// Notifies observers that a property value has changed. This event is backed
        /// by a <see cref="DiversionDelegate{TArg}"/>, which provides the plumbing for
        /// marshalling event handler invocations onto the appropriate threads.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged
        {
            add { _propertyChangedDelegate.Add(value); }
            remove { _propertyChangedDelegate.Remove(value); }
        }

        /// <summary>
        /// Raises this object's PropertyChanged event.
        /// </summary>
        /// <param name="propertyName">Name of the property used to notify listeners. This
        /// value is optional and can be provided automatically when invoked from compilers
        /// that support <see cref="CallerMemberNameAttribute"/>.</param>
        /// <param name="sender">The original sender of the event.</param>
        protected void RaisePropertyChanged([CallerMemberName] string propertyName = null, object sender = null)
        {
            OnPropertyChanged(new PropertyChangedEventArgs(propertyName), sender);
        }

        /// <summary>
        /// Raises this object's PropertyChanged event using a <see cref="DiversionDelegate{TArg}"/>.
        /// </summary>
        /// <param name="args">The PropertyChangedEventArgs.</param>
        /// <param name="sender">The original sender of the event.</param>
        protected void OnPropertyChanged(PropertyChangedEventArgs args, object sender = null)
        {
            _propertyChangedDelegate.Invoke(sender ?? this, args);
        }

        #endregion Prism.Mvvm.BindableBase Re-writes with DiversionDelegate Support

        /// <summary>
        /// Raise notifications for any local properties that are decorated as 'affected by'
        /// the given property change.
        /// </summary>
        /// <param name="property"></param>
        private void NotifyAffectedProperties(PropertyInfo property)
        {
            var affectedProps = property.GetCustomAttributes(typeof(AffectsPropertyAttribute), true);
            foreach (AffectsPropertyAttribute affectedProp in affectedProps)
            {
                RaisePropertyChanged(affectedProp.AffectedProperty);
            }
        }